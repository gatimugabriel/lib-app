require "test_helper"

=begin
Tests I wrote here

3. Book creation test
Used the assert_difference method to check if the number of books increased by 1 after the book was created.
I also used the assert_redirected_to method to check if the user was redirected to the books page after the book was created.

4. should not create book with invalid data - Ensures data validity when creating book

The other tests were autogenerated during rails generate

=end
class BooksControllerTest < ActionDispatch::IntegrationTest
  setup do
    @book = books(:one)
  end

  test "should get index" do
    get books_url
    assert_response :success
  end

  test "should get new" do
    get new_book_url
    assert_response :success
  end

  test "should create book" do
    assert_difference("Book.count") do
      post books_url, params: { book: { title: "Outliers", author: "Malcom Gladwell", isbn: "123456789", description: "Non fictional book on The Story of success", image_url: "https://example.com/image.jpg" } }
    end

    assert_redirected_to books_path
    assert_equal "Book was successfully created.", flash[:notice]
  end

  test "should not create book with invalid data" do
    assert_no_difference("Book.count") do
      post books_url, params: { book: { title: "", author: "Gabu", isbn: "238923", description: "", image_url: "invalid-url" } }
    end

    assert_response :unprocessable_entity
    # assert_template :new
  end

  test "should show book" do
    get book_url(@book)
    assert_response :success
  end

  test "should get edit" do
    get edit_book_url(@book)
    assert_response :success
  end

  # test "should update book" do
  #   patch book_url(@book), params: { book: { author: @book.author, description: @book.description, title: @book.title, isbn:  @book.isbn, image_url: @book.image_url } }
  #   assert_redirected_to book_url(@book)
  # end

  test "should destroy book" do
    assert_difference("Book.count", -1) do
      delete book_url(@book)
    end

    assert_redirected_to books_url
  end
end
